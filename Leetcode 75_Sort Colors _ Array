Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, 
white, and blue.We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.You must solve this problem without using the library's
sort function.

Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

1Ô∏è‚É£üöÄBrute force approach - Merge Sort
Time Complexity (TC)
Merge Sort has a time complexity of O(n log n).
The array is recursively divided into halves (O(log n) levels of recursion).
Each level requires O(n) work to merge the two sorted halves.
Thus, TC = O(n log n).

Space Complexity (SC)
Merge Sort is not in-place (unless optimized with extra effort).
It requires O(n) additional space for the temporary arrays used in merging.
Thus, SC = O(n).

But this is not acceptable by Interviewer as well as leetcode

2Ô∏è‚É£üß£Better approach
class Solution {
    public void sortColors(int[] nums) {
        int count0 = 0 , count1 = 0, count2 =0;

        for(int i=0; i<nums.length; i++){

            if(nums[i] == 0){
                count0++;
            }else if(nums[i] == 1){
                count1++;
            }else{
                count2++;
            }
        }

        for(int i =0; i<count0 ; i++){
            nums[i] =0; 
        }
        for(int i=count0; i<count0 + count1 ; i++){
            nums[i] = 1;
        }

        for(int i = count0 + count1 ; i<nums.length; i++){
            nums[i] =2;
        }

        System.out.println(Arrays.toString(nums));
        
    }
}

üéàTime Complexity Analysis
Counting occurrences ‚Üí O(n)
Overwriting values ‚Üí O(n)
Total TC = O(n) + O(n) = O(n)

‚≠ïSpace Complexity Analysis
Only integer variables (count0, count1, count2) are used.
No extra array ‚Üí O(1) space complexity.

3Ô∏è‚É£üöÄ. Optimal Solution
