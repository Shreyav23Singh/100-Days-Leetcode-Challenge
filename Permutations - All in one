Leetcode 46 - Permutation

Given an array nums of distinct integers, return all the possible 
permutations
. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

____________________________________________________Solution with Extra Space Complexity ____________________________________________________
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        boolean[] freq = new boolean[nums.length];

        permuteHelper(nums, ds, ans, freq);
        return ans;
    }

    private void permuteHelper(int[] nums, List<Integer> ds, List<List<Integer>> ans, boolean[] freq) {
        if (ds.size() == nums.length) {
            ans.add(new ArrayList<>(ds));
            return;
        }

        for (int i = 0; i < nums.length; i++) {
            if (!freq[i]) {
                freq[i] = true;
                ds.add(nums[i]);
                permuteHelper(nums, ds, ans, freq);
                ds.remove(ds.size() - 1);
                freq[i] = false;
            }
        }
    }
}
_______________________________________Optimal Solution with lots of extra space complexity saving ______________________________________________________________

class Solution {
    public List<List<Integer>> permute(int[] nums) {

        List<List<Integer>> ans = new ArrayList<>();// List to store all permutations
        helperPermute(0 , nums , ans);
        return ans;

        
    }

    private void helperPermute(int index, int[] nums ,List<List<Integer>> ans ){
         // Base case: If the index reaches the end of the array, store the permutation
        if(index == nums.length){
            List<Integer> ds = new ArrayList<>();

             // Iterate through the remaining elements to swap and generate permutations
            for(int i=0; i<nums.length ; i++){// Copy current nums array to a list
                ds.add(nums[i]); 
            }
            ans.add(new ArrayList<>(ds)); // Add a copy of the permutation to the answer list
            return;
        }

        for(int i=index; i<nums.length; i++){
            swap(i, index, nums); // Swap current index with i to create a new arrangement
            helperPermute(index + 1, nums, ans); // Recursively call for the next index
            swap(i, index, nums);// Backtrack to restore the original array before the next swap
        }
    }
    private void swap(int i, int j, int[] nums){
         // Swap function to exchange two elements in the array
        int temp = nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }

}
