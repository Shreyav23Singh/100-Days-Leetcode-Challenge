Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4
Example 2:

Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1
 

Constraints:

1 <= nums.length <= 104
-104 < nums[i], target < 104
All the integers in nums are unique.
nums is sorted in ascending order.

_________________________________________________________________Brute force Approach _____________________________________________________
class Solution {
    public int search(int[] nums, int target) {

        for(int i=0; i<nums.length ; i++){
            if(nums[i]== target){
                return i;
            }

        }
        return -1;
        
    }
}

TC - O(n)
SC - O(1)

_________________________________________________________________________________Optimal__________________________________________

class Solution {
    public int search(int[] nums, int target) {
        int n= nums.length;

        int low =0 , high = n-1, mid =0;

        while(low <= high){
            mid = low+ (high  - low) /2;

            if( target == nums[mid]){
                return mid;
                
            }else if(target < nums[mid]){
                high = mid -1;
                
            }else{
                low= mid + 1;
            }
        }

    
        return -1;

        
    }
}

⌚👩🏻‍💻Time Complexity
Best Case: 𝑂(1)
O(1) (If the target is found at mid in the first iteration)
Worst Case: 𝑂(log𝑛)
O(logn) (Binary search reduces search space by half each time)

💫💡Space Complexity - O(1)
