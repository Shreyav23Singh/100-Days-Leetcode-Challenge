Maximum Subarray , Leetcode 53

******* Brute Force Approach ***********
class Solution {
    public int maxSubArray(int[] nums) {

        int maxSum = Integer.MIN_VALUE; //

        for(int st=0; st < nums.length; st++){
            
            for(int end = st;end < nums.length;end++){
                int currentSum = 0;
                for(int k=st; k<=end; k++){

                currentSum+= nums[k];
                maxSum = Math.max(maxSum , currentSum);
            }
            }
            
        }
        return maxSum;
        
    }
}

Time Complexity = O(n^3)
Space Complexity = O(1)
_______________________________________________________________________________________________________________________

****** By Kadane's Algorithm ****** 

class Solution {
    public int maxSubArray(int[] nums) {

        int currentSum =0; 
        int maxSum=Integer.MIN_VALUE;

        for(int i=0; i<nums.length ; i++){
            currentSum += nums[i];

            if(currentSum < 0){
                currentSum = 0;
            }

            maxSum = Math.max(currentSum , maxSum);
        }
        return maxSum;
        
    }
}

Time Complexity = O(n)
Space Complexity = O(1)
