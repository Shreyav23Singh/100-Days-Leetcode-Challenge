Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]

-------------------------------------------------------------------------Solution-------------------------------------------------------------------------------------

class Solution {
    public int[] twoSum(int[] nums, int target) {

        HashMap<Integer, Integer> hmap = new HashMap<>();

        for(int i = 0 ; i<nums.length; i++){
            int other = target - nums[i];

            if(hmap.containsKey(other)){
                return new int[]{i, hmap.get(other)}; //If we found the other element, then we return index
            }

            hmap.put(nums[i] , i ); //If other is not found, we store the current number nums[i] in the map with its index.
        }
        return new int[]{};// If no pair is found in the loop, we return an empty array [] (though the problem guarantees at least one solution).

        
    }
}


Time Complexity (TC) & Space Complexity (SC) Analysis
☑️Time Complexity (TC) = O(n)
The function iterates through the array once, meaning it runs in O(n) time.
Each operation in a HashMap (insertion, lookup, retrieval) takes O(1) on average.
So, the overall time complexity is O(n).

☑️Space Complexity (SC) = O(n)
We use extra space for the HashMap, which in the worst case stores all n elements.
The returned array (new int[]{i, map.get(other)}) takes O(1) space since it always contains two elements.
Thus, the dominant factor is the HashMap, making the space complexity O(n).


🪜Final Complexity:
Time Complexity: O(n)
Space Complexity: O(n)
